# 423. Reconstruct Original Digits from English

## Statement

Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in **ascending** order.

**Example 1:**
```text
Input: s = "owoztneoer"
Output: "012"
```
**Example 2:**
```text
Input: s = "fviefuro"
Output: "45"
```

**Constraints:**

- `1 <= s.length <= 10^5`
- `s[i]` is one of the characters `["e","f","g","h","i","n","o","r","s","t","u","v","w","x","z"]`.
- `s` is **guaranteed** to be valid.

## Solution

### Intuition

Five of the numbers are very unique with their characters. So count the unique alphabets and then deduce others form them easily.

### Approach

1. Count the alphabets
1. Find the number of unique digits
1. Deduce the number of remaining digits

### Complexity
- Time complexity: `O(n)`
- Space complexity: `O(n)`

### Code

```python
from collections import Counter
class Solution:
    def originalDigits(self, s: str) -> str:
        # count the alphabets
        cnt = Counter(s)

        # Unique
        zero  = cnt['z']
        two   = cnt['w']
        four  = cnt['u']
        six   = cnt['x']
        eight = cnt['g']

        # Remaining
        three = cnt['h'] - eight
        seven = cnt['s'] - six
        five  = cnt['f'] - four
        one   = cnt['o'] - zero - two - four
        nine  = (cnt['n'] - seven - one) // 2

        three = three if three > 0 else 0
        seven = seven if seven > 0 else 0
        five  = five  if five  > 0 else 0
        one   = one   if one   > 0 else 0
        nine  = nine  if nine  > 0 else 0

        result = f"{'0'*zero}{'1'*one}{'2'*two}{'3'*three}{'4'*four}{'5'*five}{'6'*six}{'7'*seven}{'8'*eight}{'9'*nine}"
        return result
```