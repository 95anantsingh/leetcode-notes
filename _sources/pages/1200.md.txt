# 1200. Minimum Absolute Difference

## Statement

Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows

- `a, b` are from `arr`
- `a < b`
- `b - a` equals to the minimum absolute difference of any two elements in `arr`
 

**Example 1:**
```text
Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.
```
**Example 2:**
```text
Input: arr = [1,3,6,10,15]
Output: [[1,3]]
```
**Example 3:**
```text
Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]
``` 

**Constraints:**

- `2 <= arr.length <= 10^5`
- `-10^6 <= arr[i] <= 10^6`

## Solution

### Intuition

To reduce the time taken to find the minimum difference we have to sort the array first and then find the pairs easily.

### Approach

- Sort the array
- Find the minimum difference
- Find the pairs

### Complexity
- Time complexity: `O(n*log(n))`, 
- Space complexity: `O(x)`, where `x` is number of pairs

### Code

```python
import sys
class Solution:
    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr.sort()
        min_dif = sys.maxsize

        for i in range(1,len(arr)):
            if min_dif > arr[i]-arr[i-1]: min_dif = arr[i]-arr[i-1]

        r_arr = []
        for i in range(1,len(arr)):
            if min_dif == arr[i]-arr[i-1]: r_arr.append([arr[i-1],arr[i]])

        return r_arr
```